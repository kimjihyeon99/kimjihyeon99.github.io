---
layout: post
title: "[DB] 1장 기출문제"
date: "2021-05-02 12:00:00 +0200" 
image: 12.jpg
tags: [db, 1장, daatmodeling]
categories: DB
---

### ✏ 1번

<img src = https://user-images.githubusercontent.com/44187194/116812165-41a27580-ab88-11eb-82da-d2440fc969c2.png width=700 height=350>

#### 답: 2번

#### 해설 

 모델링은 단지 시스템 구현만을 위해 수행하는 것이 아니라, 시스템 구현을 포함한 업무 분석 및 업무 형상화를 하는 목적도 있음
 
### ✏ 2번

<img src = https://user-images.githubusercontent.com/44187194/116812351-63e8c300-ab89-11eb-8d82-ccae3b57a8b3.png width=700 height=350>

#### 답: 3번

#### 해설

  데이터 모델링 목적
  - 정보들을 일정한 표기법에 의해 표현함으로써 업무내용을 정확하게 분석하는것
  - 분석된 모델을가지고, db를 생성하여 개발 및 데이터 관리에 사용하는것
  - 데이터 베이스 구축 용도 뿐만 아니라, 업무를 설명하고 분석하는 부분에도 중요함

### ✏ 3번

<img src = https://user-images.githubusercontent.com/44187194/116812512-0acd5f00-ab8a-11eb-951e-199a6114f1e6.png width=700 height=350>

#### 답: 3번

#### 해설

  데이터모델링 할 때 유의 사항
  - 1.중복 : 여러장소에 같은 정보를 저장하는 잘못을 하지 않도록 한다.
  - 2.비유연성 : 데이터 정의를 데이터 사용 프로세스와 분리함으로써, 데이터 변화가 데이터베이스에 중대한 변화를 일으킬 수 있는 가능성 줄인다.
  - 3.비일관성 : 정보를 갱신하는 경우, 연관된 다른 데이터와 모순된다는 고려없이 수정하면 비일관성이 발생한다. 
                 

### ✏ 4번

<img src = https://user-images.githubusercontent.com/44187194/116812839-c8a51d00-ab8b-11eb-85bb-899428aea926.png width=700 height=350>

#### 답: 3번

#### 해설

  - 비일관성  
  
  정보를 갱신하는 경우, 연관된 다른 데이터와 모순된다는 고려없이 수정하면 비일관성이 발생한다. 
  
  데이터 간의 상호 연관관계를 명확하게 정의해 위험을 예방한다.
  
### ✏ 5번

<img src = https://user-images.githubusercontent.com/44187194/116812914-36514900-ab8c-11eb-8971-6e9f32d6f1d1.png width=700 height=350>

#### 답: 1번

#### 해설 

  - 개념적모델링 
  
  전사적 데이터 모델링을 수행할 때 많이 하며, 추상화 수준이 높고 업무 중심적이고 
  
  포괄적인 수준의 모델링을 진행하는 것
  
  - 물리적 모델링
  
  데이터베이스에 이식할 수 있도록 성능, 저장 등의 물리적인 성격을 고려한 데이터 모델링
  
### ✏ 6번

<img src = https://user-images.githubusercontent.com/44187194/116813164-664d1c00-ab8d-11eb-9201-872b84d1054a.png width=700 height=350>

#### 답: 2번

#### 해설 

  - 개념 스키마 
  
  모든 사용자 관점을 통합한 조직 전체 관점의 통합적 표현
  
  모든 응용시스템들이나 사용자들이 필요로 하는 데이터를 통합한 조직 전체의 DB를 기술한것
  
### ✏ 7번

<img src = https://user-images.githubusercontent.com/44187194/116813250-ea070880-ab8d-11eb-9f0b-e36b7072f329.png width=700 height=350>

#### 답: 4번

#### 해설 

  부모 엔터티에 데이터가 입력될 때 자식 엔터티에 해당 값이 존재하는지의 여부와 상관없이 입력될 수 있는 구조로 표현. 
  
  고객 엔터티에 새로운 고객번호 데이터를 입력하는 것은 주문엔터티에 해당 고객 번호가 존재여부와 상관없이 가능하다.
  
### ✏ 8번

<img src = https://user-images.githubusercontent.com/44187194/116813371-6ef22200-ab8e-11eb-82a7-287167d96961.png width=700 height=350>

#### 답: 4번

#### 해설 

  부모 엔터티에 데이터가 입력될 때 자식 엔터티에 해당 값이 존재하는지의 여부와 상관없이 입력될 수 있는 구조로 표현. 
  
  고객 엔터티에 새로운 고객번호 데이터를 입력하는 것은 주문엔터티에 해당 고객 번호가 존재여부와 상관없이 가능하다.

### ✏ 9번

<img src =https://user-images.githubusercontent.com/44187194/117918036-48b64a00-b325-11eb-90ce-be65c1044dd4.png width=700 height=350>

#### 답: 2번

#### 해설 

  엔터티는 2개 이상의 속성과 2개 이상의 인스턴스를 가져 면적으로 표현 될 수 있어야함
  
  '여러명'의 복수 인스턴스와 이름, 주소 등의 복수 속성을 가진 '환자'가 엔터티로 적절함
  
### ✏ 10번

<img src = https://user-images.githubusercontent.com/44187194/117918345-ced29080-b325-11eb-9aee-40d849d17c06.png width=700 height=350>

#### 답: 3번

#### 해설 

  엔터티의 특징
  - 반드시 해당 업무에서 필요하고 관리하고자하는 정보
  - 유일한 식별자에 의해 식별 가능
  - 영속적으로 존재하는 (두 개 이상의) 인스턴스 집합이어야 함
  - 업무 프로세스에 의해 이용되어야 함
  - 반드시 속성이 있어야함
  - 다른 엔터티와 최소 한 개 이상의 관계가 있어야 함

### ✏ 11번

<img src = https://user-images.githubusercontent.com/44187194/117918625-56b89a80-b326-11eb-9667-5fc707db7ef5.png width=700 height=350>

#### 답: 1번

#### 해설 

  10 번의 해설과 같이 엔터티는 다른 엔터티와 최소 한 개 이상의 관계가 있어야 함

### ✏ 12번

<img src = https://user-images.githubusercontent.com/44187194/117918696-823b8500-b326-11eb-9017-43c6d56d2807.png width=700 height=350>

#### 답: 1번

#### 해설 

  기본엔터티(키엔터티)
  
  -기본엔터티(키엔터티)란 그 업무에 원래 존재하는 정보로서 다른 엔터티와의 관계에 의해 생성되지 않고
  
  독립적으로 생성이 가능하고 자신은 타 엔터티의 부모 역할을 하게 됨
  
  
  -다른 엔터티로 부터 주 식별자를 상속 받지 않고 자신의 고유한 주식별자를 가짐 
 
 ### ✏ 13번

<img src = https://user-images.githubusercontent.com/44187194/117919252-a2b80f00-b327-11eb-8ba9-cda5e522a536.png width=700 height=350>

#### 답: 1번

#### 해설 

  엔터티 명명 기준
  - 현업 업무에서 사용하는 용어를 사용함
  - 약어를 사용하지 않음
  - 단수명사를 사용함
  - 모든 엔터티를 통틀어서 유일하게 이름이 부여되게함
  - 엔터티 생성의미대로 이름을 부여함

 ### ✏ 14번

<img src = https://user-images.githubusercontent.com/44187194/117919495-0cd0b400-b328-11eb-9d36-49f5e2ba7a05.png width=700 height=350>

#### 답: 속성

#### 해설 

  속성
  
  : 업무상에서 필요로 하는 인스턴스에서 관리하고자 하는 의미상 더 이상 분리되지 않는 최소의 데이터 단위
  
### ✏ 15번

<img src =  https://user-images.githubusercontent.com/44187194/117919631-54efd680-b328-11eb-8f3b-d94381de1b29.png width=700 height=350>

#### 답: 3번

#### 해설 

  하나의 인스턴스에서 각각의 속성은 한 개의 속성값을 가져야함
  
### ✏ 16번

<img src = https://user-images.githubusercontent.com/44187194/117919947-efe8b080-b328-11eb-94f6-2020244891d4.png width=700 height=350>

#### 답: 3번

#### 해설 

  이자는 계산된 값으로 파생속성이 맞지만, 이자율은 원래 가지고 있어야 하는 속성이므로 기본 속성에 해당함
  
### ✏ 17번

<img src = https://user-images.githubusercontent.com/44187194/117920128-4a820c80-b329-11eb-8aef-a34306af3e83.png  width=700 height=350>

#### 답: 1번

#### 해설 

  파생속성
  - 데이터를 조회할 때 빠른 성능을 위해 원래 속성의 값을 계산하여 저장할 수 있도록 만든 속성

### ✏ 18번

<img src = https://user-images.githubusercontent.com/44187194/117920275-903ed500-b329-11eb-88ce-e9a48403630d.png  width=700 height=350>

#### 답: 4번

#### 해설 

  도메인 
  - 각 엔터티(테이블)의 속성에 대해서 어떤 유형의 값이 들어가는지를 정의
 
### ✏ 19번

<img src = https://user-images.githubusercontent.com/44187194/117920464-ddbb4200-b329-11eb-9486-511b4b814e49.png width=700 height=350>

#### 답: 3번

#### 해설 

  속성의 명칭 명명 
  - 애매모호하지 않게
  - 복합명사를 사용해 구체적으로
  - 데이터 모델에서 유일성 확보
  -> 반정규화, 통합 등의 작업시 혼란 방지 방법
 
### ✏ 20번

<img src = https://user-images.githubusercontent.com/44187194/117920653-35f24400-b32a-11eb-98a0-7cb3b659662d.png width=700 height=350>

#### 답: 3번, 4번

#### 해설 

  데이터모델링에서 존재적 관계와 행위에 의한 관계를 구분하는 표기법이 없음
  
  UML에서는 연관관계와 의존관계에 대해 다른 표기법을 가지고 표현함
  
### ✏ 21번

<img src =  https://user-images.githubusercontent.com/44187194/117921136-27585c80-b32b-11eb-9b88-f51d8f43b030.png width=700 height=350>

#### 답: 2번

#### 해설 

  관계
  - 존재적 관계와 행위에 의한 관계로 나눌 수 있음
  - 부서와 사원 엔터티간의 '소속'관계는 존재적관계 사례
  - 주문과 배송 엔터티 간의 '배송근거'관계는 행위에 의한 관계 사례
  - 관계표기법 관계명, 관계차수, 선택성(선택사양)의 3가지개념으로 표현 

### ✏ 22번

<img src = https://user-images.githubusercontent.com/44187194/117921661-14925780-b32c-11eb-807f-0d2a17911a52.png width=700 height=350>

#### 답: 2번

#### 해설 

  관계차수
  - 관계의 기수성을 나타내는 개념

### ✏ 23번

<img src = https://user-images.githubusercontent.com/44187194/117921818-5e7b3d80-b32c-11eb-865f-dffbb99fff13.png width=700 height=350>

#### 답: 3번

#### 해설 

  두 개의 엔터티 사이에 정의한 관계를 체크하는 사항
  - 두 개의 엔터티 사이에 관심있는 연관규칙이 존재하는가?
  - 두 개의 엔터티 사이에 정보의 조합이 발생되는가?
  - 업무기술서, 장표에 관계연결에 대한 규칙이 서술되어 있는가?
  - 업무기술서, 장표에 관계연결을 가능하게 하는 동사가 있는가?

### ✏ 24번

<img src = https://user-images.githubusercontent.com/44187194/117924117-368dd900-b330-11eb-8159-4f77b7917ac6.png width=700 height=350>

#### 답: 4번

#### 해설 

  23번의 해설을 보면 모두 해당되는 사항이다.
  
### ✏ 25번

<img src = https://user-images.githubusercontent.com/44187194/117924897-743f3180-b331-11eb-8b86-1959596b9198.png  width=700 height=350>

#### 답: 4번

#### 해설 

  주 식별자 고려사항
  - 주식별자에 의해 엔터티 내에 모든 인스턴스들이 유일하게 구분되어야 함
  - 주식별자를 구성하는 속성의 수는 유일성을 만족하는 최소의 수가 되어야함
  - 지정된 주 식별자의 값은 자주 변하지 않는 것이어야 함
  - 주 식별자가 지정이 되면 반드시 값이 들어와야 함

### ✏ 26번

<img src = https://user-images.githubusercontent.com/44187194/117925743-a2714100-b332-11eb-9a53-04e9fc0a589b.png width=700 height=350>

#### 답: 4번

#### 해설 

  `사번`은 업무적으로 의미 있는 식별자로 시스템적으로 부여된 `인조식별`자가 아니라 
  
  일반적으로 사원 인스턴스의 탄생과 함께 부여되는 사원 인스턴스의 본질적인 속성에 해당
  
  -> `본질 식별자`
  
### ✏ 27번

<img src = https://user-images.githubusercontent.com/44187194/117926808-4f988900-b334-11eb-895a-45f7af2da1f8.png width=700 height=350>

#### 답: 2번

#### 해설 

  명칭, 내역 등과 같이 이름으로 기술되는 것들은 주 식별자로 지정하기에 적절하지 않음
  
  특히, 사람이름은 동명이인이 있을 수 있기 때문에 주 식별자로 부적절함
  
### ✏ 28번

<img src = https://user-images.githubusercontent.com/44187194/117926990-8d95ad00-b334-11eb-8593-876e366bca37.png width=700 height=350>

#### 답: 2번

#### 해설 

  주식별자 도출 기준
  - 해당 업무에서 자주 이용되는 속성
  - 명칭, 내역 등과 같이 이름으로 기술되는 것들은 주식별자로 지정하지 않음
  - 복합으로 주식별자로 구성할 경우 너무 많은 속성이 포함되지 않도록 함
  - 자주 수정되는 속성도 주식별자로 지정하지 않음
  
### ✏ 29번

<img src = https://user-images.githubusercontent.com/44187194/117927515-44922880-b335-11eb-8f80-3abb916d755a.png width=700 height=350>

#### 답: 4번

#### 해설 

  비식별자 관계 선택 기준
  - 관계의 강약을 분석하여 상호간의 연관성이 약할 경우
  - 자식테이블에서 독립적인 Primary key 구조를 가지기 원할때
  - 모든 관계가 식별자 관계로 연결되면 SQL Where절에서 비교하는 항목이 증가되어 조인에 

    참여하는 테이블에 따라 문장이 길어져 SQL문의 복잡성이 증가되는 것을 방지하기 위해

<img src = https://user-images.githubusercontent.com/44187194/117929597-f6325900-b337-11eb-8abb-ea62dfc0b73c.png width=700 height=350>


### ✏ 30번

<img src = https://user-images.githubusercontent.com/44187194/117927537-4c51cd00-b335-11eb-80ee-a0b24c29fcf1.png width=700 height=350>

#### 답: 2번

#### 해설 

  비식별자 관계로 연결하는 것을 고려해야하는 경우 
  - 부모엔터티에 참조값이 없어도 자식엔터티의 인스턴스가 생성될 수 있는 경우
  - 여러 개의 엔터티를 하나로 통합하면서 각각의 엔터티가 갖고 있던 여러 개의 개별 관계가 통합되는 경우
  - 자식쪽 엔터티의 주식별자를 부모엔터티와는 별도로 생성하는 것이 더 유리하다고 판단하는 경우 

<img src = https://user-images.githubusercontent.com/44187194/117929652-05190b80-b338-11eb-83ac-388731bd258e.png width=700 height=350>
